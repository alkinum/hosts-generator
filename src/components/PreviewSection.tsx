import React, { useState } from 'react';
import { Copy, CheckCircle } from 'lucide-react';
import { DNSResult, DOHProvider } from '../types';

interface PreviewSectionProps {
  results: DNSResult[];
  selectedProvider: DOHProvider;
  includeLocalhost: boolean;
  onIncludeLocalhostChange: (include: boolean) => void;
}

export const PreviewSection: React.FC<PreviewSectionProps> = ({
  results,
  selectedProvider,
  includeLocalhost,
  onIncludeLocalhostChange
}) => {
  const [copySuccess, setCopySuccess] = useState(false);

  const generateHostsFile = () => {
    const header = includeLocalhost ? [
      '# Hosts file generated by hosts-generator',
      `# Generated on: ${new Date().toISOString()}`,
      `# Resolved using ${selectedProvider.label} DNS over HTTPS`,
      '',
      '# Default localhost entries',
      '127.0.0.1 localhost',
      '::1 localhost',
      '',
      '# Custom entries'
    ] : [
      '# Hosts file generated by hosts-generator',
      `# Generated on: ${new Date().toISOString()}`,
      `# Resolved using ${selectedProvider.label} DNS over HTTPS`,
      '',
      '# Custom entries'
    ];

    const entries = results
      .filter(result => result.ip)
      .map(result => `${result.ip} ${result.domain}`);

    return [...header, ...entries].join('\n');
  };

  const copyToClipboard = async () => {
    try {
      await navigator.clipboard.writeText(generateHostsFile());
      setCopySuccess(true);
      setTimeout(() => setCopySuccess(false), 2000);
    } catch (err) {
      console.error('Failed to copy:', err);
    }
  };

  const hasResults = results.length > 0;

  return (
    <div className="bg-gray-900 border-l border-r border-b border-gray-700 rounded-b-lg p-4">
      <div className="mb-3 flex items-center justify-between">
        <div>
          <div className="text-green-500 text-sm mb-1 select-none">PREVIEW</div>
          <div className="text-gray-400 text-xs mb-3 select-none">Generated hosts file content</div>
        </div>
        
        {hasResults && (
          <div className="flex items-center gap-3">
            <label className="flex items-center gap-2 text-xs text-gray-400 select-none cursor-pointer">
              <input
                type="checkbox"
                checked={includeLocalhost}
                onChange={(e) => onIncludeLocalhostChange(e.target.checked)}
                className="w-3 h-3 text-green-600 bg-gray-800 border-gray-600 rounded focus:ring-green-500"
              />
              Include localhost entries
            </label>
            
            <button
              onClick={copyToClipboard}
              className="flex items-center gap-2 bg-gray-700 hover:bg-gray-600 text-gray-300 py-1 px-3 rounded text-xs transition-colors select-none"
            >
              {copySuccess ? (
                <>
                  <CheckCircle className="w-3 h-3 text-green-400" />
                  Copied!
                </>
              ) : (
                <>
                  <Copy className="w-3 h-3" />
                  Copy
                </>
              )}
            </button>
          </div>
        )}
      </div>
      
      <pre className="bg-black border border-gray-800 rounded p-3 text-xs overflow-x-auto max-h-40 overflow-y-auto min-h-28">
        <code className="text-gray-300 leading-relaxed select-text">
          {hasResults ? generateHostsFile() : '# No hosts entries generated yet\n# Resolve some domains to see the output here'}
        </code>
      </pre>
    </div>
  );
};